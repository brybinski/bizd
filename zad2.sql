--DROP TABLE EMPLOYEES CASCADE CONSTRAINTS;
--DROP TABLE JOBS CASCADE CONSTRAINTS;
--DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS;
--DROP TABLE LOCATIONS CASCADE CONSTRAINTS;
--DROP TABLE COUNTRIES CASCADE CONSTRAINTS;
--DROP TABLE REGIONS CASCADE CONSTRAINTS;
--COPY DATA
CREATE TABLE REGIONS AS SELECT * FROM HR.REGIONS;
CREATE TABLE COUNTRIES AS SELECT * FROM HR.COUNTRIES;
CREATE TABLE LOCATIONS AS SELECT * FROM HR.LOCATIONS;
CREATE TABLE DEPARTMENTS AS SELECT * FROM HR.DEPARTMENTS;
CREATE TABLE JOBS AS SELECT * FROM HR.JOBS;
CREATE TABLE EMPLOYEES AS SELECT * FROM HR.EMPLOYEES;
CREATE TABLE JOB_HISTORY AS SELECT * FROM HR.JOB_HISTORY;
CREATE TABLE JOB_GRADES AS SELECT * FROM HR.JOB_GRADES;
CREATE TABLE PRODUCTS AS SELECT * FROM HR.PRODUCTS;
CREATE TABLE SALES AS SELECT * FROM HR.SALES;
--PK
ALTER TABLE REGIONS ADD CONSTRAINT regions_id_pk PRIMARY KEY (REGION_ID);
ALTER TABLE COUNTRIES ADD CONSTRAINT countries_id_pk PRIMARY KEY (COUNTRY_ID);
ALTER TABLE LOCATIONS ADD CONSTRAINT locations_id_pk PRIMARY KEY (LOCATION_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT departments_id_pk PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE JOBS ADD CONSTRAINT jobs_id_pk PRIMARY KEY (JOB_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT employees_id_pk PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT job_history_id_date_pk PRIMARY KEY (EMPLOYEE_ID, START_DATE);
ALTER TABLE JOB_GRADES ADD CONSTRAINT job_grades_id_pk PRIMARY KEY (GRADE);
ALTER TABLE PRODUCTS ADD CONSTRAINT products_id_pk PRIMARY KEY (PRODUCT_ID);
ALTER TABLE SALES ADD CONSTRAINT sales_id_pk PRIMARY KEY (SALE_ID);
--ADD FK
ALTER TABLE COUNTRIES ADD CONSTRAINT fk_region FOREIGN KEY (REGION_ID) REFERENCES REGIONS (REGION_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_dept_manager FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT fk_location FOREIGN KEY (LOCATION_ID) REFERENCES LOCATIONS (LOCATION_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_department FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS (DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_job FOREIGN KEY (JOB_ID) REFERENCES JOBS (JOB_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT fk_manager FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history_employee FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history_department FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS (DEPARTMENT_ID);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT fk_job_history_job FOREIGN KEY (JOB_ID) REFERENCES JOBS (JOB_ID); 

ALTER TABLE LOCATIONS ADD CONSTRAINT fk_country FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES (COUNTRY_ID);

ALTER TABLE SALES ADD CONSTRAINT fk_employee_sales FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEE_ID);

--A to już nie potrzebne było xD
ALTER TABLE SALES ADD CONSTRAINT fk_product_sales FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID);

SELECT CONCAT(CONCAT(last_name, ' '), salary) AS wynagrodzenie FROM employees 
WHERE department_id IN (20, 50) AND salary BETWEEN 2000 AND 7000
ORDER BY last_name;

SELECT hire_date, last_name, salary FROM employees
WHERE manager_id IS NOT NULL
  AND EXTRACT(YEAR FROM hire_date) = 2005
ORDER BY salary;

SELECT CONCAT(CONCAT(first_name, ' '), last_name) AS full_name, salary, phone_number
FROM employees
WHERE SUBSTR(last_name, 3, 1) = 'e'
--  AND first_name LIKE 'John'
ORDER BY 1 DESC, 2 ASC;

--zmieniłem liczby bo nie było prawie nikogo poniżej 200
SELECT first_name, last_name, ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) AS months_worked, salary,
CASE 
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) < 200 THEN salary * 0.10
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, HIRE_DATE)) BETWEEN 200 AND 250 THEN salary * 0.20
        ELSE salary * 0.30
END AS wysokość_dodatku
FROM EMPLOYEES ORDER BY months_worked ASC;

SELECT d.department_name, ROUND(SUM(e.salary)) AS suma_zarobków, ROUND(AVG(e.salary)) AS średnia_zarobków
FROM  employees e JOIN  departments d ON e.department_id = d.department_id
GROUP BY d.department_name
HAVING MIN(e.salary) > 5000;

SELECT e.employee_id, e.first_name, e.last_name , d.department_name, l.city
FROM EMPLOYEES e JOIN 
	DEPARTMENTS d JOIN LOCATIONS l ON l.LOCATION_ID=d.LOCATION_ID 
ON d.department_id = d.department_id 
WHERE l.CITY = 'Toronto';



SELECT 
    e1.first_name || ' ' || e1.last_name AS JENIFER,
    e2.first_name || ' ' || e2.last_name AS COWORKER
FROM 
    employees e1
JOIN 
    employees e2 ON e1.department_id = e2.department_id
WHERE 
    e1.first_name = 'Jennifer'
    AND e1.employee_id != e2.employee_id;

   	
   